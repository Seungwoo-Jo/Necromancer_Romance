// GLOBALS //
cbuffer global
{
	float red;
	float blue;
	float green;
	float alpha;
	Texture2D shaderTextures[2];
	SamplerState SampleType;
}


// TYPEDEFS //
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

// Pixel Shader
float4 TexturePixelShader(PixelInputType input) : SV_TARGET
{
	// WALK EFFECT
	float2 tempTex = input.tex;
	float2 small = 0;
	float4 tempColor = 0;
	float clock = 0;

	clock = (1.0f - saturate(alpha)) * 1000.0f;

	small.x = 0.5f;
	small.y = 0.5f;
   
	tempTex = lerp(input.tex, small, clock*0.0003f);
   
	tempTex.y += sin(clock*0.01f)/35;
   
	if(tempTex.x >= 0 && tempTex.x <= 1 && tempTex.y >= 0 && tempTex.y <= 1) {
		tempColor = shaderTextures[0].Sample(SampleType, tempTex);
	}

	float tempAlpha = alpha;

	if(clock < 500.0f) {
		tempAlpha = 1.0f;
	}
	else {
		tempAlpha = alpha * 2.0f;
	}

	// ALPHA BLENDING
	float4 color1;
	float4 color2;
    float4 alphaValue;
    float4 blendColor;

	color1 = shaderTextures[0].Sample(SampleType, input.tex);
	color2 = shaderTextures[1].Sample(SampleType, input.tex);
	
	alphaValue.r = tempColor.a * tempAlpha;
	alphaValue.g = tempColor.a * tempAlpha;
	alphaValue.b = tempColor.a * tempAlpha;
	alphaValue.a = tempAlpha;
	
	blendColor = (alphaValue * tempColor) + ((1.0 - alphaValue) * color2);
	blendColor = saturate(blendColor);


	return blendColor;	
}